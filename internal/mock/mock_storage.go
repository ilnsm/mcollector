// Code generated by MockGen. DO NOT EDIT.
// Source: transport.go
//
// Generated by this command:
//
//	mockgen -destination=../../mock/mock_storage.go -source=transport.go Storage
//

// Package mock_transport is a generated GoMock package.
package mock_transport

import (
	context "context"
	reflect "reflect"

	models "github.com/ospiem/mcollector/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStorage) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStorageMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorage)(nil).Close), ctx)
}

// GetCounters mocks base method.
func (m *MockStorage) GetCounters(ctx context.Context) (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounters", ctx)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCounters indicates an expected call of GetCounters.
func (mr *MockStorageMockRecorder) GetCounters(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounters", reflect.TypeOf((*MockStorage)(nil).GetCounters), ctx)
}

// GetGauges mocks base method.
func (m *MockStorage) GetGauges(ctx context.Context) (map[string]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGauges", ctx)
	ret0, _ := ret[0].(map[string]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGauges indicates an expected call of GetGauges.
func (mr *MockStorageMockRecorder) GetGauges(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGauges", reflect.TypeOf((*MockStorage)(nil).GetGauges), ctx)
}

// InsertBatch mocks base method.
func (m *MockStorage) InsertBatch(ctx context.Context, metrics []models.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBatch", ctx, metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBatch indicates an expected call of InsertBatch.
func (mr *MockStorageMockRecorder) InsertBatch(ctx, metrics any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBatch", reflect.TypeOf((*MockStorage)(nil).InsertBatch), ctx, metrics)
}

// InsertCounter mocks base method.
func (m *MockStorage) InsertCounter(ctx context.Context, k string, v int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCounter", ctx, k, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertCounter indicates an expected call of InsertCounter.
func (mr *MockStorageMockRecorder) InsertCounter(ctx, k, v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCounter", reflect.TypeOf((*MockStorage)(nil).InsertCounter), ctx, k, v)
}

// InsertGauge mocks base method.
func (m *MockStorage) InsertGauge(ctx context.Context, k string, v float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertGauge", ctx, k, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertGauge indicates an expected call of InsertGauge.
func (mr *MockStorageMockRecorder) InsertGauge(ctx, k, v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertGauge", reflect.TypeOf((*MockStorage)(nil).InsertGauge), ctx, k, v)
}

// Ping mocks base method.
func (m *MockStorage) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockStorageMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockStorage)(nil).Ping), ctx)
}

// SelectCounter mocks base method.
func (m *MockStorage) SelectCounter(ctx context.Context, k string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectCounter", ctx, k)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectCounter indicates an expected call of SelectCounter.
func (mr *MockStorageMockRecorder) SelectCounter(ctx, k any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectCounter", reflect.TypeOf((*MockStorage)(nil).SelectCounter), ctx, k)
}

// SelectGauge mocks base method.
func (m *MockStorage) SelectGauge(ctx context.Context, k string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectGauge", ctx, k)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectGauge indicates an expected call of SelectGauge.
func (mr *MockStorageMockRecorder) SelectGauge(ctx, k any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectGauge", reflect.TypeOf((*MockStorage)(nil).SelectGauge), ctx, k)
}
